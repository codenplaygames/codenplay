{"name":"Codenplay","tagline":"Code'n'Play library.","body":"Everything started with a crazy idea...\r\n\r\n> WouldnÂ´t be great to have a low-cost, easy-to-program , C/C++ , RPi based, handle videogame console?\r\n\r\nWow... Are you crazy? ...But, how about using [Biicode](https://www.biicode.com/), and its new RPi support? How about creating a RPi shield that will \"support\" the videogame console, and a library, that will include everything you need to program your videogames, in a new fashion way? Ok..\r\n\r\n### Let's do it!! \r\n(there is also a [contest](https://www.biicode.com/biicontest2014-en), so, let's try that deadline as well)\r\n\r\n(Yes, WE LOVE deadlines. Yes, WE LOVE lack of sleep following crazy ideas. And YES!, WE LOVE videogames)   \r\n\r\nNote: one great side-effect about this setup is that, using Biicode, we can program the same game to be 100% cross platform. It will run on a Desktop PC and on the RPi handle console, without minor or no code modification at all.\r\n\r\nThis is going to be long so, please, take your time...\r\n\r\n### The Hardware\r\n> Keep it simple, and dirty.\r\n\r\nWhat do we need:\r\n\r\n1. Small screen, analog input. \r\n2. Joystick and buttons.\r\n3. Power, a lot of power. \r\n\r\n(To be bought from the same store, if possible)\r\n\r\nSo, here is our selected hardware:\r\n\r\nScreen: [Adafruit 3.5\" TFT PAL/NTSC](http://www.bricogeek.com/shop/pantallas-lcd/574-pantalla-tft-35-ntsc-pal.html)\r\n\r\nJoystick: [Sparkfun Joystick](http://www.bricogeek.com/shop/componentes/240-joystick-analogico-playstation2.html)\r\n\r\nButtons: [Square buttons](http://www.bricogeek.com/shop/508-pack-pulsadores-de-colores-15-unidades.html)\r\n\r\nBattery: [LiPo 1S 6000 mAh battery](http://www.bricogeek.com/shop/baterias-lipo/418-bateria-lipo-6000mah-37v.html)\r\n\r\nBattery charger and regulators (5V for the RPi, 12V for the Screen): \r\n\r\n[Sparkfun LiPo USB charger](http://www.bricogeek.com/shop/baterias-lipo/48-cargador-de-bateria-lipo-\r\nusb.html)\r\n\r\n[Pololu adjustable regulator](http://www.bricogeek.com/shop/herramientas-de-prototipado/184-conversor-dc-ajustable-4-25v-2a.html)\r\n\r\nOne GPIO expander and one analog to digital converter, for the buttons and joystick.\r\n\r\n### The Shield (prototype 1)\r\n> One shield to play them all\r\n\r\nBasic schema:\r\n\r\n\r\n![Basic module scheme](http://www.mdblabs.com/img/biiconsole/esquema.png)\r\n\r\n\r\nWe received all the hardware:\r\n\r\n![Hardware received](http://www.mdblabs.com/img/biiconsole/hw1.JPG)\r\n\r\nFirst hardware mock-up:\r\n\r\n![HW scheme](http://www.mdblabs.com/img/biiconsole/hw2.JPG)\r\n\r\nTesting electronics:\r\n\r\n![Screen test](http://www.mdblabs.com/img/biiconsole/screenTest.JPG)\r\n\r\nAnd buttons board:\r\n\r\n![Buttons test](http://www.mdblabs.com/img/biiconsole/buttonTest.JPG)\r\n\r\nReady for first (final) assembly:\r\n\r\n![Modules ready](http://www.mdblabs.com/img/biiconsole/firstAssembly1.JPG)\r\n\r\n![Assembly 2](http://www.mdblabs.com/img/biiconsole/firstAssembly2.JPG)\r\n\r\nReady for first boot:\r\n\r\n![Ready to boot](http://www.mdblabs.com/img/biiconsole/firstAssembly3.JPG)\r\n\r\n![First Boot](http://www.mdblabs.com/img/biiconsole/firstBoot.JPG)\r\n\r\n### The videogame\r\n>Flap, flap, little bee.\r\n\r\nAs we need a framework to work with, without the hardware, we configure a QEMU raspbian image with everything that we need for programming our first videogame, and Biicode library.\r\n\r\nDid you like flappy bird? You will love Flappy Bee! Jump to get the same hive colors, without touching ground!\r\n(Ok, it was just a \"proof of concept\": be kind.)\r\n\r\n![FlappyBee on Ubuntu](http://www.mdblabs.com/img/biiconsole/FlappyUb.png)\r\n\r\nThe software scheme:\r\n\r\nWe are using SDL as the main graphic library. We tried to upload it to Biicode, without positive results. Finally, we decided to used it as one external dependency.\r\n\r\nFor the buttons and joystick handler, we are using the drogon/wiringPi library. \r\n\r\nPhysics using Eigen library, also in Biicode.\r\n\r\n###The library\r\n>Genius at work: Please, hold the line.\r\n\r\nThe basic idea:\r\n\r\n![Library Scheme](http://www.mdblabs.com/img/biiconsole/codenplayScheme.png)\r\n\r\nCode'n'Play will include high level classes to handle not only IO interfaces with the console, but will wrap an easy-to-use framework, higher than the SDL, to program videogames, using Biicode.\r\n\r\nExample classes:\r\n* Joystick class: will handle Joystick inputs.\r\n* Buttons class: will handle Buttons inputs.\r\n* Graph: image and test management, made easy.\r\n* Player: videogame player unity.\r\n* World: videogame main class. Where the game takes place.\r\n* Several objects classes, like mobile object, static object, etc.\r\n\r\n###The case\r\n> Always inside a nice envelope (as far as you can...)\r\n\r\nWe design a holding structure and case prototype for the shield. The idea was a Plug-and-Play system, where the player/developer only needs to build/buy/obtain the Code'n'Play shield, he would install a custom-made Raspian image, with a Menu to load the games and, using his own Raspberry, will be ready to roll.\r\n\r\nWe modeled the electronics using a CAD program, and designed the case and structured around it. A video of the assembly and how to used it, after the break.\r\n\r\n![Render model](http://www.mdblabs.com/img/biiconsole/RenderModel1.png)\r\n\r\nWe used a Reprap Prusa Mendel printer to print all the parts.\r\n\r\n![Printing](http://www.mdblabs.com/img/biiconsole/printing.JPG)\r\n\r\n![Printed](http://www.mdblabs.com/img/biiconsole/piezaImpresa.JPG)\r\n\r\n###Cross compiling\r\n>Where the problems begin...\r\n\r\nBii uses a cross-compiler in order generate the binary file, that will be load into the RPi.\r\n\r\nOur library will used other Biicode libraries, like WiringPi or Eigen, which are already there. But, we want to use SDL as our main videogame and media manager library, which is not. \r\n\r\nFirst step: install SDL locally in our RPi, and compile example code. This works fine.\r\n\r\nSecond step: using bii to generate executables using wiring pi, to control buttons and joysticks, sending it to the RPi via ssh. This also works.\r\n\r\nSo, what's next? Let's try to, using the pre-compiled SDL from the RPi, compile our videogame using and configuring the cross compilers.\r\n\r\nAfter spending almost a week working on this, we are still working, and the cross compiler cannot locate the pre-compiled SDL...\r\n\r\n###Conclusions\r\n>The end?\r\n\r\nAlthough we think this console-shield can have a lot of potential, trying to combine the SDL with our library was a big mess.\r\n\r\nTrying to compile the code, modifying the biicode's CMAKE files seems the way-to-go. At this moment, headers files are located but it doesn't link the final solution. Some of the libraries are located, but others are not. Also, passing SDL configuration options to the cross compiler looks difficult, or not working.\r\n\r\nSo, here you are the conclusions:\r\n* Biicode is a great tool, with a lot of potential, also on the embedded system side.\r\n* Using the SDL as main library wasn't a good idea. If we would use freeglut (already in Biicode) instead of the SDL, we were able to achieved a more usable videogame library.\r\n* On the other side, controllers and hardware interfaces were easy to use thanks to WiringPi library.\r\n\r\nNext steps:\r\n* We would like to made a second prototype, more robust and lighter.\r\n* We are evaluating the use of freeglut instead of SDL for the graphics.\r\n\r\nFinally, Biicode contest was a great way to made us learn the tool, and it push us forward to finish our prototype, so, thank you! :)\r\n\r\n###Stay tuned for further updates!","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}